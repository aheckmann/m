#!/usr/bin/env bash

M_PREFIX=${M_PREFIX-/usr/local}
M_DIR=$M_PREFIX/m
VERSIONS_DIR=$M_DIR/versions
BUILD_DIR_BASE=$M_DIR/mongo-

# m version
VERSION="1.3.3"

# log path
LOGPATH="/tmp/m.log"

#
# Log the given <msg ...>
#

log() {
  printf "\033[90m...\033[0m $@\n"
}

#
# Exit with the given <msg ...>
#

abort() {
  printf "\033[31mError: $@\033[0m\n" && exit 1
}

# setup

test -d $VERSIONS_DIR || mkdir -p $VERSIONS_DIR

if ! test -d $VERSIONS_DIR; then
  abort "Failed to create versions directory ($VERSIONS_DIR), do you have permissions to do this?"
fi

# curl / wget support

GET=

# wget support (Added --no-check-certificate for Github downloads)
which wget > /dev/null && GET="wget -q -O-"

# curl support
which curl > /dev/null && GET="curl -# -L"

# Ensure we have curl or wget

test -z "$GET" && abort "curl or wget required"

#
# Output usage information.
#

display_help() {
  cat <<-help

  Usage: m [options] [COMMAND] [config]

  Commands:

    m                            Output versions installed
    m latest [config ...]        Install or activate the latest MongoDB release
    m stable [config ...]        Install or activate the latest stable MongoDB release
    m <version> [config ...]     Install and/or use MongoDB <version>
    m custom <version> <tarball> [config ...]  Install custom MongoDB <tarball> with [args ...]
    m use <version> [args ...]   Execute mongod <version> with [args ...]
    m shard <version> [args ...] Execute mongos <version> with [args ...]
    m shell <version> [args ...] Open a mongo shell <version> with [args ...]
    m bin <version>              Output bin path for <version>
    m rm <version ...>           Remove the given version(s)
    m --latest                   Output the latest MongoDB version available
    m --stable                   Output the latest stable MongoDB version available
    m ls                         Output the versions of MongoDB available
    m installed [--json]         Output installed versions available (optionally, in JSON format)
    m src <version>              Output the url for source used for the given <version>
                                   (useful if installed from source)
    m pre <event> [script]       Declare one or list scripts to execute before <event>
                                   (scripts must use absolute paths)
    m post <event> [script]      Declare one or list scripts to execute after <event>
                                   (scripts must use absolute paths)
    m pre <event> rm [script]    Remove pre <event> script
    m post <event> rm [script]   Remove post <event> script

  Events:

    change   Occurs when switching MongoDB versions
    install  Occurs when installing a previously uninstalled MongoDB version

  Options:

    -V, --version   Output current version of m
    -h, --help      Display help information

  Aliases:

    which   bin
    use     as
    shard   sd
    list    ls
    custom  c
    shell   s

help
  exit 0
}

#
# Output m version.
#

display_m_version() {
  echo $VERSION && exit 0
}

#
# Check for installed version, and populate $active
#
check_current_version() {
  which mongo &> /dev/null
  if test $? -eq 0; then
    active=`mongod --version | grep "version\s*v[0-9]" | egrep -o '[0-9]+\.[0-9]+\.[0-9]+([-_\.][a-zA-Z0-9]+)?' | head -1`
    ent=`mongod --version | egrep "modules:\s*enterprise" | wc -l`
    [[ $ent == *1 ]] && active="$active-ent"
  fi
}

#
# Display current MongoDB --version
# and others installed.
#

display_versions() {
  local option=$1; shift
  local json=false

  declare -a versions
  versions=(`ls -1 $VERSIONS_DIR | sort -t. -k 1,1n -k 2,2n -k 3,3n`)
  if test -z "$versions"; then
    echo No installed versions
    return
  fi
  local last=${versions[${#versions[@]}-1]}

  if test "$option" = "--json"; then
    json=true
    printf "["
  fi

  check_current_version
  for version in ${versions[@]}; do
    local dir="$VERSIONS_DIR/$version"
    local config=`test -f $dir/.config && cat $dir/.config`

    if $json; then
      printf "\n  {\n    \"name\" : \"$version\",\n    \"path\" : \"$dir/bin/\" \n  }"
      if [ "$version" != "$last" ]; then
         printf ","
      fi
    else
      if [ "$version" = "$active" ]; then
        printf "  \033[32mÎ¿\033[0m $version \033[90m$config\033[0m\n"
      else
        printf "    $version \033[90m$config\033[0m\n"
      fi
    fi
  done

  if $json; then
    printf "\n]\n"
  fi
}

#
# Install MongoDB <version> [config ...]
#

install_mongo() {
  local version=$1; shift
  local config=$@
  check_current_version

  if test "$version" = "$active"; then
    echo "$version already active"
    exit 0;
  fi

  # activate
  local dir=$VERSIONS_DIR/$version
  if test -d $dir; then
    pre change
    cd $dir \
      && cp -Rf $dir/bin/* $M_PREFIX/bin \
      && post change
  # install
  else
    prompt_install "MongoDB version $version is not installed."
    install_bin $version $config
  fi
}

#
# Prompt installation
#
#   prompt_install "About to install something"
#

prompt_install() {
  echo $1
  while true; do
    read -p "Installation may take a while. Would you like to proceed? [y/n] " yn
    case $yn in
      [Yy]* ) break;;
      [Nn]* ) echo "Aborted."; exit 0;;
      * ) echo "Please answer yes or no.";;
    esac
  done
}

#
# Install MongoDB <version> binary
#
#   template    http://fastdl.mongodb.org/$OS/mongodb-$OS-$ARCH-$VERSION.tgz
#
#   linux32     http://fastdl.mongodb.org/linux/mongodb-linux-i686-2.2.2.tgz
#   linux64     http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.2.2.tgz
#   osx64       http://fastdl.mongodb.org/osx/mongodb-osx-x86_64-2.2.2.tgz
#   osx64 ssl   http://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.0.4.tgz
#   solaris64   http://fastdl.mongodb.org/sunos5/mongodb-sunos5-x86_64-2.2.2.tgz
#
#   not supported
#   win32       http://fastdl.mongodb.org/win32/mongodb-win32-i386-2.3.2.zip
#   win64       http://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2.0.8.zip
#   win64 2008+ http://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-2.0.3.zip
#

install_bin() {
  local version=$1
  local config=$2
  local community=1


  # check if enterprise
  if [[ $version == *-ent ]]; then
    community=0
    version=${version%????}
  fi

  if ! test -z $config; then
    # config was passed, must build from source
    local tarball="mongodb-src-r$version.tar.gz"
    local url="http://downloads.mongodb.org/src/$tarball"
    install_tarball $version $url $config
    exit 0
  fi

  # determine url based on os and arch

  local arch=`uname -m`
  local OS=`uname`
  local os=`echo $OS | tr '[:upper:]' '[:lower:]'`

  case $os in
    linux* )
      os=linux ;;
    darwin* )
      os=osx
      # SSL is included in MongoDB 3.0.4+ builds, but with different download path
      if [[ "$version" =~ ^[34].* ]]; then
        sslbuild="osx-ssl"
      fi
      ;;
    sunos* )
      os=sunos5 ;;
    * )
      bin_not_supported $OS $version $config ;;
  esac

  if [ -z ${sslbuild+x} ]; then
    sslbuild=$os
  fi

  # determine the download url
  if [[ "$community" == 1 ]]; then
    local tarball="mongodb-$sslbuild-$arch-$version.tgz"
    local url="http://fastdl.mongodb.org/$os/$tarball"
  else # enterprise version
    if [[ "$os" == linux ]]; then
      local tarball="mongodb-$os-$arch-enterprise-rhel70-$version.tgz" # for linux fetch the rhel7 tarball
    else
      local tarball="mongodb-$os-$arch-enterprise-$version.tgz"
    fi
    local url="http://downloads.10gen.com/$os/$tarball"
    version="$version-ent"
  fi

  if ! good $url; then
    # Fallback to generic build if not already using this
    if [ "$sslbuild" != "$os" ]; then
      tarball="mongodb-$os-$arch-$version.tgz"
      url="http://fastdl.mongodb.org/$os/$tarball"
      echo "Binary not available with SSL support. Checking url for generic (non-SSL) binaries."
      if ! good $url; then
        bin_not_supported $OS $version $config
        exit 0;
      fi
    else
       bin_not_supported $OS $version $config
       exit 0;
    fi
  fi

  log "installing binary"

  pre install

  # perform the download
  local builddir="$BUILD_DIR_BASE$version"
  download $version $url $builddir

  # copy binaries to version directory
  local dir=$VERSIONS_DIR/$version
  mkdir -p $dir

  mv "$builddir/bin" $dir \
    && cleanup "$builddir" \
    && install_mongo $version \
    && ln -sf $dir "$M_PREFIX/m/current" \
    && post install \
    && log "installation complete"
}

# Install MongoDB <version> from source <tarball> [config ...]
#
#   m custom 2.3.2 http://downloads.mongodb.org/src/mongodb-src-r2.3.2.tar.gz flags
#

install_tarball() {
  log "installing from source"

  pre install

  local version=$1
  local url=$2; shift 2
  local config=$@

  local builddir="$BUILD_DIR_BASE$version"

  download $version $url $builddir

  local dir=$VERSIONS_DIR/$version

  cd "$builddir" \
    && scons all \
    && scons --prefix $dir $config install \
    && cd .. \
    && cleanup "$builddir" \
    && echo $config > "$dir/.config" \
    && $0 $version \
    && ln -sf $dir "$M_PREFIX/m/current" \
    && post install \
    && log "installation complete"
}

#
# Determine if $url is good
#

good() {
  local url=$1
  curl -Is $url | head -n 1 | grep 200 > /dev/null
}

#
# Prompt when we cannot install binary
#

bin_not_supported() {
  local OS=$1
  local version=$2
  local config=$3
  local tarball="mongodb-src-r$version.tar.gz"
  local url="http://downloads.mongodb.org/src/$tarball"
  prompt_install "Binary for \"$OS $version\" not supported. Attempting to install from source."
  log "installing from source"
  install_tarball $version $url $config
}

#
# Download and untar
#

download() {
  local version=$1
  local url=$2
  local builddir=$3

  # create build directory
  mkdir -p $builddir

  # fetch and unpack
  cd $builddir \
    && $GET $url | tar xz --strip-components=1 > $LOGPATH 2>&1

  # see if things are alright
  if test $? -gt 0; then
    cd -
    cleanup "$builddir"
    printf "\033[31mError: installation failed\033[0m\n"
    printf "  MongoDB version $version does not exist,\n"
    printf "  m failed to fetch the tarball,\n"
    printf "  or tar failed. Try a different\n"
    printf "  version or view $LOGPATH to view\n"
    printf "  error details.\n"
    exit 1
  fi
  cd -
}

#
# Cleanup after the given <version>
#

cleanup() {
  local dir=$1

  if test -d $dir; then
    log "removing source"
    rm -rf $dir
  fi
}

#
# Remove <versions ...>
#

remove_versions() {
  test -z $1 && abort "version(s) required"
  check_current_version
  while test $# -ne 0; do
    local version=${1#v}
    if test "$version" = "$active"; then
      printf "\033[33mSKIPPING\033[0m active version $version. "
      printf "Please change versions before removing.\n"
    else
      rm -rf $VERSIONS_DIR/$version
      echo "removed $version"
    fi

    shift
  done
}

#
# Output bin path for <version>
#

display_bin_path_for_version() {
  test -z $1 && abort "version required"
  local version=${1#v}
  local bin=$VERSIONS_DIR/$version/bin
  if test -f "$bin/mongo"; then
    echo $bin
  else
    abort "$1 is not installed"
  fi
}

#
# Execute the given <version> of MongoDB
# with [args ...]
#

execute_with_version() {
  test -z $1 && abort "version required"
  local version=${1#v}
  local bin=$VERSIONS_DIR/$version/bin/mongod

  shift # remove version

  if test -f $bin; then
    $bin $@
  else
    abort "$version is not installed"
  fi
}

#
# Execute the given <version> of mongos
# with [args ...]
#

execute_shard_with_version() {
  test -z $1 && abort "version required"
  local version=${1#v}
  local bin=$VERSIONS_DIR/$version/bin/mongos

  shift # remove version

  if test -f $bin; then
    $bin $@
  else
    abort "$version is not installed"
  fi
}



#
# Execute a script with the given shell of
# MongoDB <version> with [args...]
#

execute_shell_with_version() {
  test -z $1 && abort "version required"
  local version=${1#v}
  local bin=$VERSIONS_DIR/$version/bin/mongo

  shift # remove version

  if test -f $bin; then
    $bin $@
  else
    abort "$version is not installed"
  fi
}

#
# Display the latest MongoDB release version.
#

display_latest_version() {
  $GET 2> /dev/null http://dl.mongodb.org/dl/src/ \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+([-_\.]rc[0-9]+)?' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display the latest stable MongoDB release version.
#

display_latest_stable_version() {
  $GET 2> /dev/null http://dl.mongodb.org/dl/src/ \
    | egrep -o '[0-9]+\.[02468]+\.[0-9]+\.zip' \
    | sed s/.zip$// \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display the available MongoDB versions.
#

list_versions() {
  check_current_version
  local versions=""
  versions=`$GET 2> /dev/null http://dl.mongodb.org/dl/src/ \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+([-_\.]rc[0-9]+)?' \
    | sort -u \
    | sort -s -k 2.3n -t - \
    | sort -s -k 1,1n -k 2,2n -k 3,3n -t . \
    | awk '{ print "  " $1 }'`

  for v in $versions; do
    if test "$active" = "$v"; then
      printf "  \033[32mÎ¿\033[0m $v \033[0m\n"
    else
      if test -d $VERSIONS_DIR/$v; then
        printf "  * $v \033[0m\n"
      else
        printf "    $v\n"
      fi
    fi
  done
}

#
# Display src url for given <version>.
#

list_src_url() {
  test -z $1 && abort "version required"
  local version=$1
  local tarball="mongodb-src-r$version.tar.gz"
  local url="http://downloads.mongodb.org/src/$tarball"
  echo "$url"
}

#
# store a hook
#

install_hook() {
  local hook=$1
  local event=$2
  local path=$3
  local file="$M_DIR/$1_$2"

  #log "installing $1 hook into $file"
  touch $file

  validate_event $event

  # with no path, print all hooks
  if [ "" = "$path" ]; then
    if [ "pre" = $hook ]; then
      list_pres $event
    else
      list_posts $event
    fi
    exit 0
  fi

  if [ "-" = $path ] || [ "rm" = $path ]; then
    # removing script or all scripts
    if [ "" = "$4" ]; then
      # remove all
      cat /dev/null > $file
    else
      # remove specified
      # skip sed & avoid path escaping issues
      touch tmp
      while read line
      do
        if ! [ $4 = $line ]; then
          echo $line >> tmp
        fi
      done < $file
      mv tmp $file
    fi
  else
    # add hook

    if ! test -x $path; then
      abort "not an executable file: $path"
    fi

    if ! [[ $path == /* ]]; then
      abort "not an absolute path: $path"
    fi

    # (ensure it exists only once)
    # skip sed & avoid path escaping issues
    while read line
    do
      if [ $path = $line ]; then
        exit 0
      fi
    done < $file

    echo $path >> $file
  fi
}

#
# validates hook type
# {install,change}
#

validate_event() {
  if ! ([ "$1" = "install" ] || [ "$1" = "change" ]); then
    abort "invalid hook event: '$1'. Must be 'install' or 'change'."
  fi
}

#
# executes pre hooks
#

pre() {
  local file=$M_DIR/pre_$1
  if test -f $file; then
    while read line
    do
      $line
    done < $file
  fi
}

#
# executes post hooks
#

post() {
  local file=$M_DIR/post_$1
  if test -f $file; then
    while read line
    do
      $line
    done < $file
  fi
}

#
# print all pre hooks
#

list_pres() {
  if test -f $M_DIR/pre_$1; then
    while read line
    do
      echo $line
    done < $M_DIR/pre_$1
  fi
}

#
# print all post hooks
#

list_posts() {
  if test -f $M_DIR/post_$1; then
    while read line
    do
      echo $line
    done < $M_DIR/post_$1
  fi
}

# Handle arguments

if test $# -eq 0; then
  display_versions
else
  while test $# -ne 0; do
    case $1 in
      -V|--version) display_m_version ;;
      -h|--help|help) display_help ;;
      installed) display_versions $2; exit ;;
      --latest) display_latest_version $2; exit ;;
      --stable) display_latest_stable_version $2; exit ;;
      bin|which) display_bin_path_for_version $2; exit ;;
      as|use) shift; execute_with_version $@; exit ;;
      sd|shard) shift; execute_shard_with_version $@; exit ;;
      s|shell) shift; execute_shell_with_version $@; exit ;;
      rm) shift; remove_versions $@; exit ;;
      latest) install_mongo `$0 --latest`; exit ;;
      stable) install_mongo `$0 --stable`; exit ;;
      ls|list) list_versions $2; exit ;;
      c|custom) shift; install_tarball $@; exit ;;
      pre) shift; install_hook pre $@; exit ;;
      post) shift; install_hook post $@; exit ;;
      src) shift; list_src_url $@; exit;;
      *) install_mongo $@; exit ;;
    esac
    shift
  done
fi
